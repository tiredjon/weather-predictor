import numpy as np
import pandas as pd
from datetime import datetime
from meteostat import Point, Daily
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import joblib
import os
import streamlit as st

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
start = datetime(2020, 7, 14)
end = datetime(2025, 7, 14)
tashkent = Point(41.2995, 69.2401)

df = Daily(tashkent, start, end).fetch()

# 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
df.drop(['snow', 'wdir', 'wpgt', 'tsun'], axis=1, inplace=True)
df['prcp'] = df['prcp'].fillna(0)
df['target'] = df['tavg'].shift(-1)
df = df.reset_index(drop=False)
df.dropna(inplace=True)

# 3. –î–æ–±–∞–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
df['month'] = df['time'].dt.month
df['dayofweek'] = df['time'].dt.dayofweek

# 4. –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
features = ['tavg', 'tmin', 'tmax', 'prcp', 'wspd', 'pres', 'month', 'dayofweek']
target = 'target'

# 5. –°–ø–ª–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
df['time'] = pd.to_datetime(df['time'])
train = df[df['time'] < '2023-07-15']
val   = df[(df['time'] >= '2023-07-15') & (df['time'] < '2024-07-15')]
test  = df[df['time'] >= '2024-07-15']

X_train, y_train = train[features], train[target]
X_val, y_val = val[features], val[target]
X_test, y_test = test[features], test[target]

# 6. –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å—ë–º –¥–∞—Ç–∞—Å–µ—Ç–µ
full_X = df[features]
full_y = df['target']

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(full_X, full_y)

# 7. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
test_preds = model.predict(X_test)
mae = mean_absolute_error(y_test, test_preds)
rmse = np.sqrt(mean_squared_error(y_test, test_preds))


st.title("üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–¢–∞—à–∫–µ–Ω—Ç)")

st.markdown("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")

# –ü–æ–ª—è –≤–≤–æ–¥–∞
tavg = st.number_input("–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", value=25.0)
tmin = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", value=20.0)
tmax = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", value=30.0)
prcp = st.number_input("–û—Å–∞–¥–∫–∏ (–º–º)", value=0.0)
wspd = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–∫–º/—á)", value=10.0)
pres = st.number_input("–ê—Ç–º. –¥–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞)", value=1010.0)
month = st.slider("–ú–µ—Å—è—Ü", 1, 12, 7)
dayofweek = st.slider("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0=–ü–Ω, 6=–í—Å)", 0, 6, 2)

# –ü—Ä–æ–≥–Ω–æ–∑
if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"):
    features = np.array([[tavg, tmin, tmax, prcp, wspd, pres, month, dayofweek]])
    prediction = model.predict(features)[0]
    st.success(f"üå°Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞: **{prediction:.2f}¬∞C**")



# 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
print("–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤:", os.getcwd())
joblib.dump(model, 'weather_model_final.pkl')